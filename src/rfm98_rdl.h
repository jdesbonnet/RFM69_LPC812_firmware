/**
 * C/C++ header file for RFM98
 * Auto generated by ICRDL v0.1. 
 * Do not edit. Instead edit ICRDL XML file and regenerate.
 */

/** Register RFM98_FIFO at address 0x00 **/
#define RFM98_FIFO (0x00)                         /* FIFO register address */

/** Register RFM98_OPMODE (Operation Mode) at address 0x01 **/
#define RFM98_OPMODE (0x01)                       /* OPMODE register address */
#define RFM98_OPMODE_LoRaMode (1<<7)              /*  */
#define RFM98_OPMODE_LoRaMode_MASK (0x1<<7)       /* LoRaMode bit mask */
#define RFM98_OPMODE_LoRaMode_VALUE(x) (((x)<<7)&RFM98_OPMODE_LoRaMode_MASK)
#define RFM98_OPMODE_ModulationType_MASK (0x3<<5) /* ModulationType bit mask */
#define RFM98_OPMODE_ModulationType_VALUE(x) (((x)<<5)&RFM98_OPMODE_ModulationType_MASK)
#define RFM98_OPMODE_ModulationType_FSK (0)       /*  */
#define RFM98_OPMODE_ModulationType_OOK (1)       /*  */
#define RFM98_OPMODE_LowFrequencyMode (1<<3)      /*  */
#define RFM98_OPMODE_LowFrequencyMode_MASK (0x1<<3) /* LowFrequencyMode bit mask */
#define RFM98_OPMODE_LowFrequencyMode_VALUE(x) (((x)<<3)&RFM98_OPMODE_LowFrequencyMode_MASK)
#define RFM98_OPMODE_FSK_MASK (0x7)               /* FSK bit mask */
#define RFM98_OPMODE_FSK_VALUE(x) (((x)<<0)&RFM98_OPMODE_FSK_MASK)
#define RFM98_OPMODE_FSK_SLEEP (0)                /* Sleep mode */
#define RFM98_OPMODE_FSK_STDBY (1)                /* Standby mode */
#define RFM98_OPMODE_FSK_FS (2)                   /* Frequency Synthesis mode */
#define RFM98_OPMODE_FSK_TX (3)                   /* Transmitter mode */
#define RFM98_OPMODE_FSK_FSRX (4)                 /* Receiver mode */
#define RFM98_OPMODE_FSK_RX (5)                   /* Receiver mode */
#define RFM98_OPMODE_LoRa_LF (1<<3)               /*  */
#define RFM98_OPMODE_LoRa_LF_MASK (0x1<<3)        /* LoRa_LF bit mask */
#define RFM98_OPMODE_LoRa_LF_VALUE(x) (((x)<<3)&RFM98_OPMODE_LoRa_LF_MASK)
#define RFM98_OPMODE_LoRa_MASK (0x7)              /* LoRa bit mask */
#define RFM98_OPMODE_LoRa_VALUE(x) (((x)<<0)&RFM98_OPMODE_LoRa_MASK)
#define RFM98_OPMODE_LoRa_SLEEP (0)               /* Sleep mode */
#define RFM98_OPMODE_LoRa_STDBY (1)               /* Standby mode */
#define RFM98_OPMODE_LoRa_FSTX (2)                /* Frequency Synthesis mode */
#define RFM98_OPMODE_LoRa_TX (3)                  /* Transmitter mode */
#define RFM98_OPMODE_LoRa_FSRX (4)                /* Receiver mode */
#define RFM98_OPMODE_LoRa_RXCONTINUOUS (5)        /* receiver continuous */
#define RFM98_OPMODE_LoRa_RXSINGLE (6)            /* receive single */
#define RFM98_OPMODE_LoRa_CAD (7)                 /* channel activity detect */

/** Register RFM98_BITRATEMSB (MSB of Bit Rate (Chip Rate when Manchesterencoing is enabled)) at address 0x02 **/
#define RFM98_BITRATEMSB (0x02)                   /* BITRATEMSB register address */

/** Register RFM98_BITRATELSB (LSB of Bit Rate (Chip Rate when Manchesterencoing is enabled)) at address 0x03 **/
#define RFM98_BITRATELSB (0x03)                   /* BITRATELSB register address */

/** Register RFM98_FDEVMSB (MSB of frequency deviation) at address 0x04 **/
#define RFM98_FDEVMSB (0x04)                      /* FDEVMSB register address */

/** Register RFM98_FDEVMSB (LSB of frequency deviation) at address 0x05 **/
#define RFM98_FDEVMSB (0x05)                      /* FDEVMSB register address */

/** Register RFM98_FRFMSB (MSB of the RF carrier frequency) at address 0x06 **/
#define RFM98_FRFMSB (0x06)                       /* FRFMSB register address */

/** Register RFM98_FRFMID (Middle byte of the RF carrier frequency) at address 0x07 **/
#define RFM98_FRFMID (0x07)                       /* FRFMID register address */

/** Register RFM98_FRFLSB (LSB of the RF carrier frequency) at address 0x08 **/
#define RFM98_FRFLSB (0x08)                       /* FRFLSB register address */

/** Register RFM98_PACONFIG (Power Amplifier (PA) power configuration) at address 0x09 **/
#define RFM98_PACONFIG (0x09)                     /* PACONFIG register address */
#define RFM98_PACONFIG_PaSelect (1<<7)            /* Output on PA_BOOST pin if PaSelect=1 */
#define RFM98_PACONFIG_PaSelect_MASK (0x1<<7)     /* PaSelect bit mask */
#define RFM98_PACONFIG_PaSelect_VALUE(x) (((x)<<7)&RFM98_PACONFIG_PaSelect_MASK)
#define RFM98_PACONFIG_PaSelect_ON (1)            /*  */
#define RFM98_PACONFIG_MaxPower_MASK (0x7<<4)     /* MaxPower bit mask */
#define RFM98_PACONFIG_MaxPower_VALUE(x) (((x)<<4)&RFM98_PACONFIG_MaxPower_MASK)
#define RFM98_PACONFIG_OutputPower_MASK (0xf)     /* OutputPower bit mask */
#define RFM98_PACONFIG_OutputPower_VALUE(x) (((x)<<0)&RFM98_PACONFIG_OutputPower_MASK)

/** Register RFM98_PARAMP (Control of PA ramp time, low phase noise PLL) at address 0x0a **/
#define RFM98_PARAMP (0x0a)                       /* PARAMP register address */
#define RFM98_PARAMP_MASK (0xf)                   /*  bit mask */
#define RFM98_PARAMP_VALUE(x) (((x)<<0)&RFM98_PARAMP_MASK)
#define RFM98_PARAMP_3400us (0)                   /*  */
#define RFM98_PARAMP_2000us (1)                   /*  */
#define RFM98_PARAMP_1000us (2)                   /*  */
#define RFM98_PARAMP_500us (3)                    /*  */
#define RFM98_PARAMP_250us (4)                    /*  */
#define RFM98_PARAMP_125us (5)                    /*  */
#define RFM98_PARAMP_100us (6)                    /*  */
#define RFM98_PARAMP_62us (7)                     /*  */
#define RFM98_PARAMP_50us (8)                     /*  */
#define RFM98_PARAMP_40us (9)                     /*  */
#define RFM98_PARAMP_31us (10)                    /*  */
#define RFM98_PARAMP_25us (11)                    /*  */
#define RFM98_PARAMP_20us (12)                    /*  */
#define RFM98_PARAMP_15us (13)                    /*  */
#define RFM98_PARAMP_12us (14)                    /*  */
#define RFM98_PARAMP_10us (15)                    /*  */

/** Register RFM98_OCP (Over current protection (OCP) for the PA configuration) at address 0x0b **/
#define RFM98_OCP (0x0b)                          /* OCP register address */
#define RFM98_OCP_OcpOn (1<<4)                    /* Enable OCP */
#define RFM98_OCP_OcpOn_MASK (0x1<<4)             /* OcpOn bit mask */
#define RFM98_OCP_OcpOn_VALUE(x) (((x)<<4)&RFM98_OCP_OcpOn_MASK)
#define RFM98_OCP_OcpTrim_MASK (0xf)              /* OcpTrim bit mask */
#define RFM98_OCP_OcpTrim_VALUE(x) (((x)<<0)&RFM98_OCP_OcpTrim_MASK)

/** Register RFM98_LNA (Low Noise Amplifier (LNA) configuration) at address 0x0c **/
#define RFM98_LNA (0x0c)                          /* LNA register address */
#define RFM98_LNA_LnaZin (1<<7)                   /* LNA input impedence 0=50ohms; 1=200ohms */
#define RFM98_LNA_LnaZin_MASK (0x1<<7)            /* LnaZin bit mask */
#define RFM98_LNA_LnaZin_VALUE(x) (((x)<<7)&RFM98_LNA_LnaZin_MASK)
#define RFM98_LNA_LnaCurrentGain_MASK (0x7<<3)    /* LnaCurrentGain bit mask */
#define RFM98_LNA_LnaCurrentGain_VALUE(x) (((x)<<3)&RFM98_LNA_LnaCurrentGain_MASK)
#define RFM98_LNA_LnaGainSelect_MASK (0x7)        /* LnaGainSelect bit mask */
#define RFM98_LNA_LnaGainSelect_VALUE(x) (((x)<<0)&RFM98_LNA_LnaGainSelect_MASK)
#define RFM98_LNA_LnaGainSelect_AGC (0)           /* Set by AGC loop */
#define RFM98_LNA_LnaGainSelect_G1 (1)            /* higest gain */
#define RFM98_LNA_LnaGainSelect_G2 (2)            /* higest gain - 6dB */
#define RFM98_LNA_LnaGainSelect_G3 (3)            /* higest gain - 12dB */
#define RFM98_LNA_LnaGainSelect_G4 (4)            /* higest gain - 23dB */
#define RFM98_LNA_LnaGainSelect_G5 (5)            /* higest gain - 36dB */
#define RFM98_LNA_LnaGainSelect_G6 (6)            /* higest gain - 48dB */

/** Register RFM98_FIFOADDRPTR (FIFO SPI pointer) at address 0x0d **/
#define RFM98_FIFOADDRPTR (0x0d)                  /* FIFOADDRPTR register address */

/** Register RFM98_FIFOTXBASEADDR (Start Tx data) at address 0x0e **/
#define RFM98_FIFOTXBASEADDR (0x0e)               /* FIFOTXBASEADDR register address */

/** Register RFM98_FIFORXBASEADDR (Start Rx data) at address 0x0f **/
#define RFM98_FIFORXBASEADDR (0x0f)               /* FIFORXBASEADDR register address */

/** Register RFM98_RXBW at address 0x19 **/
#define RFM98_RXBW (0x19)                         /* RXBW register address */
#define RFM98_RXBW_DccFreq_MASK (0x7<<5)          /* DccFreq bit mask */
#define RFM98_RXBW_DccFreq_VALUE(x) (((x)<<5)&RFM98_RXBW_DccFreq_MASK)
#define RFM98_RXBW_RxBwMant_MASK (0x3<<3)         /* RxBwMant bit mask */
#define RFM98_RXBW_RxBwMant_VALUE(x) (((x)<<3)&RFM98_RXBW_RxBwMant_MASK)
#define RFM98_RXBW_RxBwExp_MASK (0x7)             /* RxBwExp bit mask */
#define RFM98_RXBW_RxBwExp_VALUE(x) (((x)<<0)&RFM98_RXBW_RxBwExp_MASK)

/** Register RFM98_AFCBW at address 0x1A **/
#define RFM98_AFCBW (0x1A)                        /* AFCBW register address */
#define RFM98_AFCBW_DccFreqAfc_MASK (0x7<<5)      /* DccFreqAfc bit mask */
#define RFM98_AFCBW_DccFreqAfc_VALUE(x) (((x)<<5)&RFM98_AFCBW_DccFreqAfc_MASK)
#define RFM98_AFCBW_RxBwMantAfc_MASK (0x3<<3)     /* RxBwMantAfc bit mask */
#define RFM98_AFCBW_RxBwMantAfc_VALUE(x) (((x)<<3)&RFM98_AFCBW_RxBwMantAfc_MASK)
#define RFM98_AFCBW_RxBwExpAfc_MASK (0x7)         /* RxBwExpAfc bit mask */
#define RFM98_AFCBW_RxBwExpAfc_VALUE(x) (((x)<<0)&RFM98_AFCBW_RxBwExpAfc_MASK)

/** Register RFM98_RSSICONFIG at address 0x23 **/
#define RFM98_RSSICONFIG (0x23)                   /* RSSICONFIG register address */
#define RFM98_RSSICONFIG_RssiDone (1<<1)          /*  */
#define RFM98_RSSICONFIG_RssiDone_MASK (0x1<<1)   /* RssiDone bit mask */
#define RFM98_RSSICONFIG_RssiDone_VALUE(x) (((x)<<1)&RFM98_RSSICONFIG_RssiDone_MASK)
#define RFM98_RSSICONFIG_RssiDone_RssiDone (1)    /*  */
#define RFM98_RSSICONFIG_RssiStart (1<<0)         /*  */
#define RFM98_RSSICONFIG_RssiStart_MASK (0x1)     /* RssiStart bit mask */
#define RFM98_RSSICONFIG_RssiStart_VALUE(x) (((x)<<0)&RFM98_RSSICONFIG_RssiStart_MASK)

/** Register RFM98_RSSIVALUE (RSSI) at address 0x24 **/
#define RFM98_RSSIVALUE (0x24)                    /* RSSIVALUE register address */
#define RFM98_RSSIVALUE_RssiValue_MASK (0xff)     /* RssiValue bit mask */
#define RFM98_RSSIVALUE_RssiValue_VALUE(x) (((x)<<0)&RFM98_RSSIVALUE_RssiValue_MASK)

/** Register RFM98_IRQFLAGS1 (IRQ Flags 1) at address 0x3e **/
#define RFM98_IRQFLAGS1 (0x3e)                    /* IRQFLAGS1 register address */
#define RFM98_IRQFLAGS1_ModeReady (1<<7)          /* Mode switch complete flag */
#define RFM98_IRQFLAGS1_ModeReady_MASK (0x1<<7)   /* ModeReady bit mask */
#define RFM98_IRQFLAGS1_ModeReady_VALUE(x) (((x)<<7)&RFM98_IRQFLAGS1_ModeReady_MASK)
#define RFM98_IRQFLAGS1_RxReady (1<<6)            /* Rx mode ready (RSSI, AGC, AFC complete) */
#define RFM98_IRQFLAGS1_RxReady_MASK (0x1<<6)     /* RxReady bit mask */
#define RFM98_IRQFLAGS1_RxReady_VALUE(x) (((x)<<6)&RFM98_IRQFLAGS1_RxReady_MASK)
#define RFM98_IRQFLAGS1_TxReady (1<<5)            /* Tx mode ready (PA ramped up) */
#define RFM98_IRQFLAGS1_TxReady_MASK (0x1<<5)     /* TxReady bit mask */
#define RFM98_IRQFLAGS1_TxReady_VALUE(x) (((x)<<5)&RFM98_IRQFLAGS1_TxReady_MASK)
#define RFM98_IRQFLAGS1_PllLock (1<<4)            /* PLL locked */
#define RFM98_IRQFLAGS1_PllLock_MASK (0x1<<4)     /* PllLock bit mask */
#define RFM98_IRQFLAGS1_PllLock_VALUE(x) (((x)<<4)&RFM98_IRQFLAGS1_PllLock_MASK)
#define RFM98_IRQFLAGS1_Rssi (1<<3)               /* RSSI exceeds threshold */
#define RFM98_IRQFLAGS1_Rssi_MASK (0x1<<3)        /* Rssi bit mask */
#define RFM98_IRQFLAGS1_Rssi_VALUE(x) (((x)<<3)&RFM98_IRQFLAGS1_Rssi_MASK)
#define RFM98_IRQFLAGS1_Timeout (1<<2)            /* Timeout */
#define RFM98_IRQFLAGS1_Timeout_MASK (0x1<<2)     /* Timeout bit mask */
#define RFM98_IRQFLAGS1_Timeout_VALUE(x) (((x)<<2)&RFM98_IRQFLAGS1_Timeout_MASK)
#define RFM98_IRQFLAGS1_PreambleDetect (1<<1)     /* In intermediate mode state */
#define RFM98_IRQFLAGS1_PreambleDetect_MASK (0x1<<1) /* PreambleDetect bit mask */
#define RFM98_IRQFLAGS1_PreambleDetect_VALUE(x) (((x)<<1)&RFM98_IRQFLAGS1_PreambleDetect_MASK)
#define RFM98_IRQFLAGS1_SyncAddressMatch (1<<0)   /* Sync and Address match */
#define RFM98_IRQFLAGS1_SyncAddressMatch_MASK (0x1) /* SyncAddressMatch bit mask */
#define RFM98_IRQFLAGS1_SyncAddressMatch_VALUE(x) (((x)<<0)&RFM98_IRQFLAGS1_SyncAddressMatch_MASK)

/** Register RFM98_IRQFLAGS2 (IRQ Flags 2) at address 0x3f **/
#define RFM98_IRQFLAGS2 (0x3f)                    /* IRQFLAGS2 register address */
#define RFM98_IRQFLAGS2_FifoFull (1<<7)           /* Set when FIFO is full (ie contains 66 bytes) */
#define RFM98_IRQFLAGS2_FifoFull_MASK (0x1<<7)    /* FifoFull bit mask */
#define RFM98_IRQFLAGS2_FifoFull_VALUE(x) (((x)<<7)&RFM98_IRQFLAGS2_FifoFull_MASK)
#define RFM98_IRQFLAGS2_FifoNotEmpty (1<<6)       /* Set when FIFO contains at least one byte */
#define RFM98_IRQFLAGS2_FifoNotEmpty_MASK (0x1<<6) /* FifoNotEmpty bit mask */
#define RFM98_IRQFLAGS2_FifoNotEmpty_VALUE(x) (((x)<<6)&RFM98_IRQFLAGS2_FifoNotEmpty_MASK)
#define RFM98_IRQFLAGS2_FifoLevel (1<<5)          /* Set when the number of bytes in the FIFO exceeds FifoThreshold */
#define RFM98_IRQFLAGS2_FifoLevel_MASK (0x1<<5)   /* FifoLevel bit mask */
#define RFM98_IRQFLAGS2_FifoLevel_VALUE(x) (((x)<<5)&RFM98_IRQFLAGS2_FifoLevel_MASK)
#define RFM98_IRQFLAGS2_FifoOverrun (1<<4)        /* Set when FIFO overrun occurs. Flags and FIFO are cleared when this bit is set. */
#define RFM98_IRQFLAGS2_FifoOverrun_MASK (0x1<<4) /* FifoOverrun bit mask */
#define RFM98_IRQFLAGS2_FifoOverrun_VALUE(x) (((x)<<4)&RFM98_IRQFLAGS2_FifoOverrun_MASK)
#define RFM98_IRQFLAGS2_PacketSent (1<<3)         /* Set when packet has been sent when in Tx mode. */
#define RFM98_IRQFLAGS2_PacketSent_MASK (0x1<<3)  /* PacketSent bit mask */
#define RFM98_IRQFLAGS2_PacketSent_VALUE(x) (((x)<<3)&RFM98_IRQFLAGS2_PacketSent_MASK)
#define RFM98_IRQFLAGS2_PayloadReady (1<<2)       /* Set when packet ready to read in Rx mode. */
#define RFM98_IRQFLAGS2_PayloadReady_MASK (0x1<<2) /* PayloadReady bit mask */
#define RFM98_IRQFLAGS2_PayloadReady_VALUE(x) (((x)<<2)&RFM98_IRQFLAGS2_PayloadReady_MASK)
#define RFM98_IRQFLAGS2_CrcOk (1<<1)              /* Set when CRC has passed in Rx mode. */
#define RFM98_IRQFLAGS2_CrcOk_MASK (0x1<<1)       /* CrcOk bit mask */
#define RFM98_IRQFLAGS2_CrcOk_VALUE(x) (((x)<<1)&RFM98_IRQFLAGS2_CrcOk_MASK)
#define RFM98_IRQFLAGS2_LowBat (1<<0)             /* Set when the battery voltage drops below the Low Battery threshold. Cleared only when set to 1 by the user */
#define RFM98_IRQFLAGS2_LowBat_MASK (0x1)         /* LowBat bit mask */
#define RFM98_IRQFLAGS2_LowBat_VALUE(x) (((x)<<0)&RFM98_IRQFLAGS2_LowBat_MASK)

/** Register RFM98_RSSITHRESH (RSSI trigger level for Rssi interrupt) at address 0x29 **/
#define RFM98_RSSITHRESH (0x29)                   /* RSSITHRESH register address */
#define RFM98_RSSITHRESH_RssiThreshold_MASK (0xff) /* RssiThreshold bit mask */
#define RFM98_RSSITHRESH_RssiThreshold_VALUE(x) (((x)<<0)&RFM98_RSSITHRESH_RssiThreshold_MASK)

/** Register RFM98_RXTIMEOUT1 at address 0x2A **/
#define RFM98_RXTIMEOUT1 (0x2A)                   /* RXTIMEOUT1 register address */
#define RFM98_RXTIMEOUT1_TimeoutRxStart_MASK (0xff) /* TimeoutRxStart bit mask */
#define RFM98_RXTIMEOUT1_TimeoutRxStart_VALUE(x) (((x)<<0)&RFM98_RXTIMEOUT1_TimeoutRxStart_MASK)

/** Register RFM98_RXTIMEOUT2 at address 0x2B **/
#define RFM98_RXTIMEOUT2 (0x2B)                   /* RXTIMEOUT2 register address */
#define RFM98_RXTIMEOUT2_TimeoutRssiThresh_MASK (0xff) /* TimeoutRssiThresh bit mask */
#define RFM98_RXTIMEOUT2_TimeoutRssiThresh_VALUE(x) (((x)<<0)&RFM98_RXTIMEOUT2_TimeoutRssiThresh_MASK)

/** Register RFM98_SYNCCONFIG at address 0x2e **/
#define RFM98_SYNCCONFIG (0x2e)                   /* SYNCCONFIG register address */
#define RFM98_SYNCCONFIG_SyncOn (1<<7)            /* Enables Sync word generation and detection */
#define RFM98_SYNCCONFIG_SyncOn_MASK (0x1<<7)     /* SyncOn bit mask */
#define RFM98_SYNCCONFIG_SyncOn_VALUE(x) (((x)<<7)&RFM98_SYNCCONFIG_SyncOn_MASK)
#define RFM98_SYNCCONFIG_FifoFillCondition (1<<6) /* If 0 fills only if SyncAddress interrupt occurs */
#define RFM98_SYNCCONFIG_FifoFillCondition_MASK (0x1<<6) /* FifoFillCondition bit mask */
#define RFM98_SYNCCONFIG_FifoFillCondition_VALUE(x) (((x)<<6)&RFM98_SYNCCONFIG_FifoFillCondition_MASK)
#define RFM98_SYNCCONFIG_SyncSize_MASK (0x7<<3)   /* SyncSize bit mask */
#define RFM98_SYNCCONFIG_SyncSize_VALUE(x) (((x)<<3)&RFM98_SYNCCONFIG_SyncSize_MASK)
#define RFM98_SYNCCONFIG_SyncTol_MASK (0x7)       /* SyncTol bit mask */
#define RFM98_SYNCCONFIG_SyncTol_VALUE(x) (((x)<<0)&RFM98_SYNCCONFIG_SyncTol_MASK)

/** Register RFM98_SYNCVALUE1 at address 0x2f **/
#define RFM98_SYNCVALUE1 (0x2f)                   /* SYNCVALUE1 register address */

/** Register RFM98_SYNCVALUE2 at address 0x30 **/
#define RFM98_SYNCVALUE2 (0x30)                   /* SYNCVALUE2 register address */

/** Register RFM98_SYNCVALUE3 at address 0x31 **/
#define RFM98_SYNCVALUE3 (0x31)                   /* SYNCVALUE3 register address */

/** Register RFM98_SYNCVALUE4 at address 0x32 **/
#define RFM98_SYNCVALUE4 (0x32)                   /* SYNCVALUE4 register address */

/** Register RFM98_SYNCVALUE5 at address 0x33 **/
#define RFM98_SYNCVALUE5 (0x33)                   /* SYNCVALUE5 register address */

/** Register RFM98_SYNCVALUE6 at address 0x34 **/
#define RFM98_SYNCVALUE6 (0x34)                   /* SYNCVALUE6 register address */

/** Register RFM98_SYNCVALUE7 at address 0x35 **/
#define RFM98_SYNCVALUE7 (0x35)                   /* SYNCVALUE7 register address */

/** Register RFM98_SYNCVALUE8 at address 0x36 **/
#define RFM98_SYNCVALUE8 (0x36)                   /* SYNCVALUE8 register address */

/** Register RFM98_PACKETCONFIG1 (Packet Configuration 1) at address 0x37 **/
#define RFM98_PACKETCONFIG1 (0x37)                /* PACKETCONFIG1 register address */
#define RFM98_PACKETCONFIG1_PacketFormat (1<<7)   /* Defines the packet format used 0:fixed length; 1:variable length */
#define RFM98_PACKETCONFIG1_PacketFormat_MASK (0x1<<7) /* PacketFormat bit mask */
#define RFM98_PACKETCONFIG1_PacketFormat_VALUE(x) (((x)<<7)&RFM98_PACKETCONFIG1_PacketFormat_MASK)
#define RFM98_PACKETCONFIG1_PacketFormat_Fixed (0) /* Fixed length packets */
#define RFM98_PACKETCONFIG1_PacketFormat_Variable (1) /* Variable length packets */
#define RFM98_PACKETCONFIG1_DcFree_MASK (0x3<<5)  /* DcFree bit mask */
#define RFM98_PACKETCONFIG1_DcFree_VALUE(x) (((x)<<5)&RFM98_PACKETCONFIG1_DcFree_MASK)
#define RFM98_PACKETCONFIG1_DcFree_none (0)       /*  */
#define RFM98_PACKETCONFIG1_DcFree_Manchester (1) /*  */
#define RFM98_PACKETCONFIG1_DcFree_Whitening (2)  /*  */
#define RFM98_PACKETCONFIG1_CrcOn (1<<4)          /*  */
#define RFM98_PACKETCONFIG1_CrcOn_MASK (0x1<<4)   /* CrcOn bit mask */
#define RFM98_PACKETCONFIG1_CrcOn_VALUE(x) (((x)<<4)&RFM98_PACKETCONFIG1_CrcOn_MASK)
#define RFM98_PACKETCONFIG1_CrcAutoClearOff (1<<3) /*  */
#define RFM98_PACKETCONFIG1_CrcAutoClearOff_MASK (0x1<<3) /* CrcAutoClearOff bit mask */
#define RFM98_PACKETCONFIG1_CrcAutoClearOff_VALUE(x) (((x)<<3)&RFM98_PACKETCONFIG1_CrcAutoClearOff_MASK)
#define RFM98_PACKETCONFIG1_AddressFiltering_MASK (0x3<<1) /* AddressFiltering bit mask */
#define RFM98_PACKETCONFIG1_AddressFiltering_VALUE(x) (((x)<<1)&RFM98_PACKETCONFIG1_AddressFiltering_MASK)
#define RFM98_PACKETCONFIG1_AddressFiltering_none (0) /*  */
#define RFM98_PACKETCONFIG1_AddressFiltering_NodeOnly (1) /* Address must match NodeAddress */
#define RFM98_PACKETCONFIG1_AddressFiltering_NodeOrBroadcast (2) /* Address must match NodeAddress OR BroadcastAddress */

/** Register RFM98_PAYLOADLENGTH at address 0x38 **/
#define RFM98_PAYLOADLENGTH (0x38)                /* PAYLOADLENGTH register address */
#define RFM98_PAYLOADLENGTH_PayloadLength_MASK (0xff) /* PayloadLength bit mask */
#define RFM98_PAYLOADLENGTH_PayloadLength_VALUE(x) (((x)<<0)&RFM98_PAYLOADLENGTH_PayloadLength_MASK)

/** Register RFM98_NODEADRS (Node address) at address 0x39 **/
#define RFM98_NODEADRS (0x39)                     /* NODEADRS register address */

/** Register RFM98_BROADCASTADRS at address 0x3a **/
#define RFM98_BROADCASTADRS (0x3a)                /* BROADCASTADRS register address */

/** Register RFM98_FIFOTHRESH at address 0x3C **/
#define RFM98_FIFOTHRESH (0x3C)                   /* FIFOTHRESH register address */
#define RFM98_FIFOTHRESH_TxStartCondition (1<<7)  /*  */
#define RFM98_FIFOTHRESH_TxStartCondition_MASK (0x1<<7) /* TxStartCondition bit mask */
#define RFM98_FIFOTHRESH_TxStartCondition_VALUE(x) (((x)<<7)&RFM98_FIFOTHRESH_TxStartCondition_MASK)
#define RFM98_FIFOTHRESH_FifoThreshold_MASK (0x7f) /* FifoThreshold bit mask */
#define RFM98_FIFOTHRESH_FifoThreshold_VALUE(x) (((x)<<0)&RFM98_FIFOTHRESH_FifoThreshold_MASK)

/** Register RFM98_PACKETCONFIG2 (Packet Configuration 2) at address 0x3d **/
#define RFM98_PACKETCONFIG2 (0x3d)                /* PACKETCONFIG2 register address */
#define RFM98_PACKETCONFIG2_InterPacketRxDelay_MASK (0xf<<4) /* InterPacketRxDelay bit mask */
#define RFM98_PACKETCONFIG2_InterPacketRxDelay_VALUE(x) (((x)<<4)&RFM98_PACKETCONFIG2_InterPacketRxDelay_MASK)
#define RFM98_PACKETCONFIG2_RestartRx (1<<2)      /*  */
#define RFM98_PACKETCONFIG2_RestartRx_MASK (0x1<<2) /* RestartRx bit mask */
#define RFM98_PACKETCONFIG2_RestartRx_VALUE(x) (((x)<<2)&RFM98_PACKETCONFIG2_RestartRx_MASK)
#define RFM98_PACKETCONFIG2_AutoRxRestartOn (1<<1) /* Enable automatic Rx restart after Payloadready and FIFO read. */
#define RFM98_PACKETCONFIG2_AutoRxRestartOn_MASK (0x1<<1) /* AutoRxRestartOn bit mask */
#define RFM98_PACKETCONFIG2_AutoRxRestartOn_VALUE(x) (((x)<<1)&RFM98_PACKETCONFIG2_AutoRxRestartOn_MASK)
#define RFM98_PACKETCONFIG2_AesOn (1<<0)          /* Enable AES encryption */
#define RFM98_PACKETCONFIG2_AesOn_MASK (0x1)      /* AesOn bit mask */
#define RFM98_PACKETCONFIG2_AesOn_VALUE(x) (((x)<<0)&RFM98_PACKETCONFIG2_AesOn_MASK)

/** Register RFM98_REGTEMP1 (Temperature Register 1) at address 0xe4 **/
#define RFM98_REGTEMP1 (0xe4)                     /* REGTEMP1 register address */
#define RFM98_REGTEMP1_TempMeasStart (1<<3)       /*  */
#define RFM98_REGTEMP1_TempMeasStart_MASK (0x1<<3) /* TempMeasStart bit mask */
#define RFM98_REGTEMP1_TempMeasStart_VALUE(x) (((x)<<3)&RFM98_REGTEMP1_TempMeasStart_MASK)
#define RFM98_REGTEMP1_TempMeasRunning (1<<2)     /*  */
#define RFM98_REGTEMP1_TempMeasRunning_MASK (0x1<<2) /* TempMeasRunning bit mask */
#define RFM98_REGTEMP1_TempMeasRunning_VALUE(x) (((x)<<2)&RFM98_REGTEMP1_TempMeasRunning_MASK)

/** Register RFM98_REGTEMP2 (Temperature Register 2) at address 0xef **/
#define RFM98_REGTEMP2 (0xef)                     /* REGTEMP2 register address */
#define RFM98_REGTEMP2_TempValue_MASK (0xff)      /* TempValue bit mask */
#define RFM98_REGTEMP2_TempValue_VALUE(x) (((x)<<0)&RFM98_REGTEMP2_TempValue_MASK)

/** Register RFM98_TESTDAGC (Fading Margin Improvement, ref §3.4.4) at address 0x6f **/
#define RFM98_TESTDAGC (0x6f)                     /* TESTDAGC register address */
#define RFM98_TESTDAGC_ContinuousDagc_MASK (0xff) /* ContinuousDagc bit mask */
#define RFM98_TESTDAGC_ContinuousDagc_VALUE(x) (((x)<<0)&RFM98_TESTDAGC_ContinuousDagc_MASK)
#define RFM98_TESTDAGC_ContinuousDagc_Normal (0)  /*  */
#define RFM98_TESTDAGC_ContinuousDagc_LowBetaOn (0x20) /* Use if AfcLowBetaOn=1 */
#define RFM98_TESTDAGC_ContinuousDagc_LowBetaOff (0x30) /* Use if AfcLowBetaOn=0 */


